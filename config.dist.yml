# nginx proxy notes:
#   * set `proxy_set_header Host` for Minio
#   * set `s3_client_url` below
#   * increase `client_max_body_size` to allow uploading big packages

# Production version
prod:
  # Don't use Minio, connect to S3
  # The 'reproserver-secret-prod' secret needs to have 's3_key' and 's3_secret'
  use_minio: false
  # Possible are 'true', 'false' or a PersistentVolumeClaim name
  postgres_volume: true
  postgres_database: reproserver
  # Images will be pulled from that registry, eg vidanyu/reproserver-web:0.4
  image_registry: "vidanyu"
  # This can be overridden on the command-line, `doit k8s tier=prod tag=0.3`
  tag: 0.6
  # Period for the Kubernetes liveness checks
  liveness_probe_period_seconds: 60
  # URL through which the users can access S3 (useful if running Minio and we
  # access it internally using a different URL than what the users see)
  # Note that if you are proxying this under a subdirectory, request signatures
  # will fail.
  # If proxying, pass correct Host (nginx: `proxy_set_header Host $http_host;`)
  s3_client_url: "https://files.server.reprozip.org"
  # Prefix for the name of the S3 buckets
  s3_bucket_prefix: "prod"

# Development environment, no persistence
dev:
  # Use Minio, and store all data in the containers
  use_minio: true
  minio_volume: false
  postgres_volume: false
  # Period for the Kubernetes liveness checks
  liveness_probe_period_seconds: 60
  # URL through which the users can access S3
  s3_client_url: "https://devfiles.server.reprozip.org"
